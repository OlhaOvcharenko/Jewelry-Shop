// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}


model Product {
  id          String   @id @default(uuid())
  name        String
  size        String
  price       Int
  description String
  collection  String
  category    String
  photo       String
  gallery     String
  quantity    Int
  status      String
  comment     String?
  subTotal    Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bagItems    BagItem[]
  orders      Order[] 
  users       UserOnProducts[]
}

model BagItem {
  id        String   @id @default(uuid())
  quantity  Int
  comment   String?
  size      String
  subTotal  Int
  sessionId String?  // New field to track session ID

  product   Product  @relation(fields: [productId], references: [id])
  productId String   
}

model Order {
  id             String  @id @default(uuid())
  clientName     String
  clientSurname  String
  email          String 
  phone          String
  address        String
  finalAmount    Int
  
  products       Product[]
  users          UserOnOrders[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model User {
  id       String @id @default(uuid())
  name     String
  surname  String
  email    String    @unique
  phone    String
  country  String
  city     String

  role     Role      @default(USER)
  
  password Password?

  products UserOnProducts[]
  orders   UserOnOrders[]
  
}
model Password {
  id      String @id @default(uuid())
  hashedPassword String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
}

model UserOnProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User @relation(fields: [userId], references: [id])
  userId    String 

  @@id([productId, userId])
}

model UserOnOrders {
  order     Order @relation(fields: [orderId], references: [id])
  orderId String
  user      User @relation(fields: [userId], references: [id])
  userId    String 

  @@id([orderId, userId])
}